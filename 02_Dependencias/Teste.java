    Para que possamos utilizar algumas depend√™ncias para utiliza√ß√£o do FrameWork Selenium Web Driver,
        ser√° necess√°rio acessar o site: mvn repository
            Busca por selenium-java, optar pela vers√£o mais est√°vel, copia o c√≥digo relacioado ao Maven.
                Na IDE, abre o arquivo pom.xml
                    Adiciona a depend√™ncia ao arquivo.
                        Depois salva o arquivo para que todas as depend√™ncias sejam baixadas e instaladas.
    
    Onde posso consultar bibliotecas para testes?
        Maven Repository ‚Äì Para procurar e baixar bibliotecas Java.
        Awesome Testing ‚Äì Lista das melhores ferramentas de testes.

    Onde posso consultar as principais bibliotecas quando n√£o souber o que usar?
        Maven Repository
        https://github.com/SeleniumHQ


    O que faz?
        Permite controlar navegadores para automatizar testes de interface.
        selenium-java inclui todas as APIs necess√°rias para interagir com elementos de p√°ginas web.
    
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.8.3</version>
    </dependency>

    Chromium Driver tamb√©m ser√° necess√°rio baixar, de acordo com a vers√£o do chrome da pr√≥pria m√°quina local.
 
    ## **üìå Principais Depend√™ncias do Selenium WebDriver + Maven**  

    Ao trabalhar com **Selenium WebDriver** em projetos Maven, √© essencial configurar corretamente o **arquivo `pom.xml`** com as depend√™ncias necess√°rias.  
    
    ### **1Ô∏è‚É£ Depend√™ncia Principal: Selenium WebDriver**
    Esta √© a depend√™ncia essencial para automatizar testes em navegadores:  
    
    ```xml
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.20.0</version>  <!-- √öltima vers√£o recomendada -->
    </dependency>
    ```
    
    ---
    
    ### **2Ô∏è‚É£ Depend√™ncias Adicionais para Diferentes Navegadores**
    Dependendo do navegador que voc√™ deseja testar, pode ser necess√°rio adicionar depend√™ncias espec√≠ficas.
    
    #### ‚úÖ **ChromeDriver (Google Chrome)**
    ```xml
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-chrome-driver</artifactId>
        <version>4.20.0</version>
    </dependency>
    ```
    
    #### ‚úÖ **GeckoDriver (Mozilla Firefox)**
    ```xml
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-firefox-driver</artifactId>
        <version>4.20.0</version>
    </dependency>
    ```
    
    #### ‚úÖ **EdgeDriver (Microsoft Edge)**
    ```xml
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-edge-driver</artifactId>
        <version>4.20.0</version>
    </dependency>
    ```
    
    ---
    
    ### **3Ô∏è‚É£ WebDriver Manager (Para Gerenciar Drivers Automaticamente)**
    O **WebDriverManager** evita que voc√™ tenha que baixar e configurar manualmente os drivers do Chrome, Firefox, Edge, etc.
    
    ```xml
    <dependency>
        <groupId>io.github.bonigarcia</groupId>
        <artifactId>webdrivermanager</artifactId>
        <version>5.6.2</version>
    </dependency>
    ```
    **Exemplo de uso:**
    ```java
    import io.github.bonigarcia.wdm.WebDriverManager;
    import org.openqa.selenium.WebDriver;
    import org.openqa.selenium.chrome.ChromeDriver;
    
    public class Teste {
        public static void main(String[] args) {
            WebDriverManager.chromedriver().setup();
            WebDriver driver = new ChromeDriver();
            driver.get("https://www.google.com");
        }
    }
    ```
    
    ---
    
    ### **4Ô∏è‚É£ JUnit 5 (Framework para Testes Automatizados)**
    O **JUnit** √© um dos frameworks mais utilizados para escrever testes automatizados.
    
    ```xml
    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter</artifactId>
        <version>5.10.0</version>
        <scope>test</scope>
    </dependency>
    ```
    
    ---
    
    ### **5Ô∏è‚É£ TestNG (Alternativa ao JUnit)**
    Se preferir usar **TestNG**, um framework mais avan√ßado para testes, adicione:
    
    ```xml
    <dependency>
        <groupId>org.testng</groupId>
        <artifactId>testng</artifactId>
        <version>7.9.0</version>
        <scope>test</scope>
    </dependency>
    ```
    
    ---
    
    ### **6Ô∏è‚É£ Selenide (Abstra√ß√£o do Selenium)**
    O **Selenide** facilita a escrita de testes automatizados ao eliminar c√≥digo repetitivo.
    
    ```xml
    <dependency>
        <groupId>com.codeborne</groupId>
        <artifactId>selenide</artifactId>
        <version>7.3.1</version>
    </dependency>
    ```
    
    ---
    
    ### **7Ô∏è‚É£ Extent Reports (Gera√ß√£o de Relat√≥rios)**
    O **Extent Reports** gera relat√≥rios bonitos e detalhados dos testes.
    
    ```xml
    <dependency>
        <groupId>com.aventstack</groupId>
        <artifactId>extentreports</artifactId>
        <version>5.1.1</version>
    </dependency>
    ```
    
    ---
    
    ### **8Ô∏è‚É£ Log4j (Gerenciamento de Logs)**
    O **Log4j** ajuda no monitoramento dos testes atrav√©s de logs estruturados.
    
    ```xml
    <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-core</artifactId>
        <version>2.20.0</version>
    </dependency>
    ```
    
    ---
    
    ## **üìå Exemplo Completo do `pom.xml`**
    Aqui est√° um exemplo completo do `pom.xml` para um **projeto de testes com Selenium + Maven**:
    
    ```xml
    <project xmlns="http://maven.apache.org/POM/4.0.0" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
    
        <groupId>br.com.meuprojeto</groupId>
        <artifactId>AutomacaoSelenium</artifactId>
        <version>1.0-SNAPSHOT</version>
    
        <properties>
            <maven.compiler.source>17</maven.compiler.source>
            <maven.compiler.target>17</maven.compiler.target>
        </properties>
    
        <dependencies>
            <!-- Selenium WebDriver -->
            <dependency>
                <groupId>org.seleniumhq.selenium</groupId>
                <artifactId>selenium-java</artifactId>
                <version>4.20.0</version>
            </dependency>
    
            <!-- WebDriver Manager -->
            <dependency>
                <groupId>io.github.bonigarcia</groupId>
                <artifactId>webdrivermanager</artifactId>
                <version>5.6.2</version>
            </dependency>
    
            <!-- JUnit 5 -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>5.10.0</version>
                <scope>test</scope>
            </dependency>
    
            <!-- Log4j para logs -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>2.20.0</version>
            </dependency>
    
            <!-- Extent Reports (Gera√ß√£o de Relat√≥rios) -->
            <dependency>
                <groupId>com.aventstack</groupId>
                <artifactId>extentreports</artifactId>
                <version>5.1.1</version>
            </dependency>
    
            <!-- Selenide (Alternativa ao Selenium WebDriver) -->
            <dependency>
                <groupId>com.codeborne</groupId>
                <artifactId>selenide</artifactId>
                <version>7.3.1</version>
            </dependency>
        </dependencies>
    
        <build>
            <plugins>
                <!-- Plugin do Maven para rodar testes -->
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.2.5</version>
                </plugin>
            </plugins>
        </build>
    </project>
    ```
    
    ---
    
    ## **üìå Conclus√£o**
    Aqui est√£o os **principais recursos** que um projeto Selenium WebDriver + Maven pode incluir:
    
    ‚úÖ **Gerenciamento de depend√™ncias** com Selenium WebDriver.  
    ‚úÖ **Drivers automatizados** para diferentes navegadores.  
    ‚úÖ **JUnit 5 ou TestNG** para execu√ß√£o de testes.  
    ‚úÖ **Selenide** para testes mais limpos e f√°ceis de manter.  
    ‚úÖ **Extent Reports** para relat√≥rios visuais.  
    ‚úÖ **Log4j** para gerenciamento de logs.  
    
    Se precisar de mais alguma coisa, √© s√≥ perguntar! üöÄüî•